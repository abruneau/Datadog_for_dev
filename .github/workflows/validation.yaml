name: validations

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: test
    env:
      REF_TO_TEST: ${{ github.event.inputs.branch || 'main' }}
      DD_SERVICE: my_shop
      DD_CIVISIBILITY_AGENTLESS_ENABLED: 1
      DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
      DD_CIVISIBILITY_GIT_UPLOAD_ENABLED: true
      DD_CIVISIBILITY_ITR_ENABLED: true
      DD_ENV: ci
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: 'npm'
      - name: Install modules
        run: npm install
      - name: Run tests
        run: npm run test:ci

  e2e_testing:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: 'npm'
      - uses: JarvusInnovations/background-action@v1
        with:
          run: |
            npm install
            npm start
          # your step-level and job-level environment variables are available to your commands as-is
          # npm install will count towards the wait-for timeout
          # whenever possible, move unrelated scripts to a different step
          # to background multiple processes: add & to the end of the command
          wait-on: |
            http://localhost:30000
          # IMPORTANT: to use environment variables in wait-on, you must use this form: ${{ env.VAR }}
          # See wait-on section below for all resource types and prefixes
          tail: true # true = stderr,stdout
          # This will allow you to monitor the progress live
          log-output-resume: stderr
          # Eliminates previosuly output stderr log entries from post-run output
          wait-for: 5m
          log-output: stderr,stdout # same as true
          log-output-if: failure
          # failure = exit-early or timeout
          working-directory: backend
          # sets the working directory (cwd) for the shell running commands
      - name: Run Datadog Synthetics tests
        uses: DataDog/synthetics-ci-github-action@v0.9.2
        with:
          api_key: ${{ secrets.DATADOG_API_KEY }}
          app_key: ${{ secrets.DD_APPLICATION_KEY }}
          tunnel: true
          files: 'ci.synthetics.json'
          subdomain: abruneau
